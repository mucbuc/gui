
/*
  function LayerView( controller, factory ) {

    var instance = this;

    View.call( this, controller, factory );

    this.layoutVertical = function( top ) {
      for (component in instance.composite) {
        var element = instance.composite[component];
        element.bounds.setHeight( this.bounds.size.y );
        element.layoutVertical( top );
      }
      return View.prototype.layoutVertical.call( this, top );
    };

    this.layoutHorizontal = function( left ) {
      for (component in instance.composite) {
        var element = instance.composite[component];
        element.bounds.setWidth( this.bounds.size.x );
        element.layoutHorizontal( left );
      }
      return View.prototype.layoutHorizontal.call( this, left ); 
    };
  }

  LayerView.prototype = new View();


  function RowView( controller, factory ) {

    var instance = this;

    View.call( this, controller, factory );

    this.layoutVertical = function( top ) {
      
      for (component in instance.composite) {
        var element = instance.composite[component];
        element.bounds.setHeight( this.bounds.size.y );
        element.layoutVertical( top );
      }
      return View.prototype.layoutVertical.call( this, top );
    };

    this.layoutHorizontal = function( left ) {
      var fill = this.bounds.size.x;
      for (component in instance.composite) {
        var l
          , element = instance.composite[ component ];
        element.bounds.setWidth( fill );
        l = element.layoutHorizontal( left );
        fill -= l - left;
        left = l;
      }
      return View.prototype.layoutHorizontal.call( this, left ); 
    };

    this.setHeight = function( h ) {
      for (component in instance.composite) {
        instance.composite[ component ].bounds.setHeight( h );
      }
    }; 
  }

  RowView.prototype = new View();

  function ColumnView( controller, factory ) {

    View.call( this, controller, factory );
    
    this.buildIt = function() {
      
      this.buildComposite();

      var top = 20
        , cellHeight; 
      for (var type in this.composite) {
        
        var kind = this.composite[type]
          , elements = [];

        if (kind instanceof Array) {
          kind.forEach( function( element ) {
            elements.push( element );
          } );
        } 
        else {
          elements.push( kind );
        }
      }
      
      if (elements.length) {

        cellHeight = this.bounds.height() / elements.length;

        elements.forEach( function(e) {
          //e.setWidth( this.right - this.left );
          //e.setHeight( cellHeight ); 
          e.bounds = new Rect( new Vec( this.left, this.top ), new Vec( this.right - this.left, cellHeight ) );        
          top = e.layoutVertical( top );
          e.layoutHorizontal( this.left );

          //e.
          //top += cellHeight;
        } );
      }
    };

    this.layoutVertical = function( top ) {
      
      for (component in this.composite) {
        if (this.composite[component] instanceof Array) {
          var element = this.composite[ component ];
          element.forEach( function( e ) {
            e.bounds.setHeight( this.bounds.size.y );
            top = e.layoutVertical( top );
          } );
        }
        else {
          var element = this.composite[ component ];
          element.bounds.setHeight( this.bounds.size.y );
          top = element.layoutVertical( top );
        }
      }
      return View.prototype.layoutVertical.call( this, top );
    };

    this.layoutHorizontal = function( left ) {
      for (component in this.composite) {
        var element = this.composite[ component ];
        if (element instanceof Array) {
          element.forEach( function( e ) { 
            e.layoutHorizontal( left );
          } );
        }
        else {
          var element = this.composite[ component ];
          element.bounds.setWidth( this.bounds.size.x );
          element.layoutHorizontal( left );
        }
      }
      return View.prototype.layoutHorizontal.call( this, left ); 
    };
  }

  ColumnView.prototype = new View();
  exports.LayerView = LayerView;
  exports.RowView = RowView;
  exports.ColumnView = ColumnView;




/*
  function LayerView( controller, factory ) {

    var instance = this;

    View.call( this, controller, factory );

    this.layoutVertical = function( top ) {
      for (component in instance.composite) {
        var element = instance.composite[component];
        element.bounds.setHeight( this.bounds.size.y );
        element.layoutVertical( top );
      }
      return View.prototype.layoutVertical.call( this, top );
    };

    this.layoutHorizontal = function( left ) {
      for (component in instance.composite) {
        var element = instance.composite[component];
        element.bounds.setWidth( this.bounds.size.x );
        element.layoutHorizontal( left );
      }
      return View.prototype.layoutHorizontal.call( this, left ); 
    };
  }

  LayerView.prototype = new View();


  function RowView( controller, factory ) {

    var instance = this;

    View.call( this, controller, factory );

    this.layoutVertical = function( top ) {
      
      for (component in instance.composite) {
        var element = instance.composite[component];
        element.bounds.setHeight( this.bounds.size.y );
        element.layoutVertical( top );
      }
      return View.prototype.layoutVertical.call( this, top );
    };

    this.layoutHorizontal = function( left ) {
      var fill = this.bounds.size.x;
      for (component in instance.composite) {
        var l
          , element = instance.composite[ component ];
        element.bounds.setWidth( fill );
        l = element.layoutHorizontal( left );
        fill -= l - left;
        left = l;
      }
      return View.prototype.layoutHorizontal.call( this, left ); 
    };

    this.setHeight = function( h ) {
      for (component in instance.composite) {
        instance.composite[ component ].bounds.setHeight( h );
      }
    }; 
  }

  RowView.prototype = new View();

  function ColumnView( controller, factory ) {

    View.call( this, controller, factory );
    
    this.buildIt = function() {
      
      this.buildComposite();

      var top = 20
        , cellHeight; 
      for (var type in this.composite) {
        
        var kind = this.composite[type]
          , elements = [];

        if (kind instanceof Array) {
          kind.forEach( function( element ) {
            elements.push( element );
          } );
        } 
        else {
          elements.push( kind );
        }
      }
      
      if (elements.length) {

        cellHeight = this.bounds.height() / elements.length;

        elements.forEach( function(e) {
          //e.setWidth( this.right - this.left );
          //e.setHeight( cellHeight ); 
          e.bounds = new Rect( new Vec( this.left, this.top ), new Vec( this.right - this.left, cellHeight ) );        
          top = e.layoutVertical( top );
          e.layoutHorizontal( this.left );

          //e.
          //top += cellHeight;
        } );
      }
    };

    this.layoutVertical = function( top ) {
      
      for (component in this.composite) {
        if (this.composite[component] instanceof Array) {
          var element = this.composite[ component ];
          element.forEach( function( e ) {
            e.bounds.setHeight( this.bounds.size.y );
            top = e.layoutVertical( top );
          } );
        }
        else {
          var element = this.composite[ component ];
          element.bounds.setHeight( this.bounds.size.y );
          top = element.layoutVertical( top );
        }
      }
      return View.prototype.layoutVertical.call( this, top );
    };

    this.layoutHorizontal = function( left ) {
      for (component in this.composite) {
        var element = this.composite[ component ];
        if (element instanceof Array) {
          element.forEach( function( e ) { 
            e.layoutHorizontal( left );
          } );
        }
        else {
          var element = this.composite[ component ];
          element.bounds.setWidth( this.bounds.size.x );
          element.layoutHorizontal( left );
        }
      }
      return View.prototype.layoutHorizontal.call( this, left ); 
    };
  }

  ColumnView.prototype = new View();
  exports.LayerView = LayerView;
  exports.RowView = RowView;
  exports.ColumnView = ColumnView;

*/
*/