/* 
objective: 
  define bounds

*/

(function(){

  function Element( controller ) {

    this.bounds = new Rect();

    this.pinLeft = function( left ) {
      this.bounds.left = left;
    };

    this.pinRight = function( right ) {
      this.bounds.right = right;
    };

    this.pinTop = function( top ) {
      this.bounds.top = top;
    };

    this.pinBottom = function( bottom ) {
      this.bounds.bottom = bottom;
    };

    this.fillDown = function( top, height ) {
      this.bounds.top = top; 
      this.bounds.bottom = top + height;
    };

    this.fillUp = function( bottom, height ) {
      this.bounds.bottom = bottom; 
      this.bounds.top = bottom - height;
    };

    this.fillRight = function( left, width ) {
      this.bounds.left = left; 
      this.bounds.right = left + width;
    };

    this.fillDown = function( top, height ) {
      this.bounds.top = top; 
      this.bounds.bottom = top + height;
    };

    this.floatLeft = function( right ) {
      this.bounds.right = right;
      this.bounds.left = right - this.floatWidth;
      return this.floatWidth;
    };

    this.floatRight = function( left ) {
      this.bounds.left = left;
      this.bounds.right = left + this.floatWidth;
      return this.floatWidth;
    };
  
    this.floatUp = function( bottom ) {
      this.bounds.bottom = bottom;
      this.bounds.top = bottom - this.floatHeight;
      return this.floatHeight;
    };

    this.floatDown = function( top ) {
      this.bounds.top = top;
      this.bounds.bottom = top + this.floatHeight;
      return this.floatHeight;
    };

    this.calcAlignOffset = function() {
      if (controller.context.textAlign == 'center') {
        return this.bounds.width() * 0.5;
      }
      else if (controller.context.textAlign == 'right') {
        return this.bounds.width();
      }
      return 0;
    };
  }

  exports.Element = Element;

})();