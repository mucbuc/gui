(function(){

  function sign( a ) { 
    return a < 0 ? -1 : (a > 0 ? 1 : 0);
  }

	var direction = {
    RIGHT: 0,
    DOWN: 1, 
    LEFT: 2, 
    UP: 3,
  };

  function SnapLine( dir ) {

		var elements = [];

  	this.attach = function( element ) {
  		elements.push( element );
  	};

  	this.step = function( base, GAP ) {
			var result = 0
			  , GAPV = GAP ? GAP : 0;
			if (elements.length) {
				switch (dir) {
	  			case direction.RIGHT: 
	  				elements.forEach( function( element ) {
	  					var width = element.width;
	  					element.left = base.x;
	  					element.right = element.left + width;
	  					base.x += width + GAPV;
	  				} );
	  				result = base.x - GAPV;
	  				break;
	  			case direction.LEFT:
	  				elements.forEach( function( element ) {
	  					var width = element.width;
	  					element.right = base.x;
	  					element.left = element.right - width;
	  					base.x -= width + GAPV;
	  				} );
	  				result = base.x + GAPV;
	  				break;
	  			case direction.DOWN:
	  				elements.forEach( function( element ) {
	  					var bounds = element.bounds;
	  					bounds.position.y = base.y;
	  					element.bounds = bounds;
	  					base.y += bounds.diagonal.y + GAPV;
	  				} );
	  				result = base.y - GAPV;
	  				break;	  		
	  			case direction.UP:
	  				elements.forEach( function( element ) {
	  					var bounds = element.bounds;
	  					bounds.position.y = base.y - bounds.diagonal.y;
	  					element.bounds = bounds;
	  					base.y -= bounds.diagonal.y + GAPV;
	  				} );
	  				result = base.y + GAPV;
	  				break;
				}
			}  		
			return result;
  	};

  	this.strech = function( base ) {
  	};

  	this.displacement = function( GAP ) {
  		
  		if (elements.length) {
  			var result = GAP ? GAP * (elements.length - 1) : 0;
	  		
	  		switch (dir) {
	  			case direction.RIGHT: 
	  			case direction.LEFT:
	  				elements.forEach( function( element ) {
	  					result += element.width;
	  				} );
	  				break;
	  			case direction.DOWN:
	  			case direction.UP:
	  				elements.forEach( function( element ) {
	  					result += element.height;
	  				} );
	  				break;
	  		}
	  		return result;
  		}

  		return 0;
  	};
  }
  
  exports.sign = sign;
  exports.direction = direction;
  exports.SnapLine = SnapLine;

})();
