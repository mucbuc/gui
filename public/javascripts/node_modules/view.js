if (typeof Builder === 'undefined') {
  Builder = require( 'builder' ).Builder;
}

(function(Builder) {
  
  function View( controller, factory ) {

    var instance = this
      , composite;

    Element.call( this );

    this.buildComposite = function() {
      var builder = new Builder( factory );
      this.composite = builder.buildComposite( controller );
    };

  }

  View.prototype = new Element();


  function LayerView( controller, factory ) {

    var instance = this;

    View.call( this, controller, factory );

    if (typeof controller !== 'undefined') {
      this.buildComposite();
    }

    this.layoutVertical = function( top ) {
      
      for (component in instance.composite) {
        instance.composite[component].bounds.setHeight( this.bounds.size.y );
        instance.composite[component].layoutVertical( top );
      }
      return View.prototype.layoutVertical.call( this, top );
    };

    this.layoutHorizontal = function( left ) {
      for (component in instance.composite) {
        instance.composite[component].bounds.setWidth( this.bounds.size.x );
        instance.composite[component].layoutHorizontal( left );
      }
      return View.prototype.layoutHorizontal.call( this, left ); 
    };
  }

  LayerView.prototype = new View();

  function RowView( controller, factory ) {

    var instance = this;

    View.call( this, controller, factory );
    if (typeof controller !== 'undefined') {
      this.buildComposite();
    }

    this.layoutVertical = function( top ) {
      
      for (component in instance.composite) {
        instance.composite[component].bounds.setHeight( this.bounds.size.y );
        instance.composite[component].layoutVertical( top );
      }
      return View.prototype.layoutVertical.call( this, top );
    };

    this.layoutHorizontal = function( left ) {
      for (component in instance.composite) {
        instance.composite[component].bounds.setWidth( this.bounds.size.x );
        left = instance.composite[component].layoutHorizontal( left );
      }
      return View.prototype.layoutHorizontal.call( this, left ); 
    };

    this.setHeight = function( h ) {
      for (component in instance.composite) {
        instance.composite[ component ].bounds.setHeight( h );
      }
    }; 
  }

  RowView.prototype = new View();

  function ColumnView( controller, factory ) {

    var instance = this;

    View.call( this, controller, factory );
    if (typeof controller !== 'undefined') {
      this.buildComposite();
    }

    this.layoutVertical = function( top ) {
      
      for (component in instance.composite) {
        if (instance.composite[component] instanceof Array) {
          instance.composite[component].forEach( function( e ) {
            e.bounds.setHeight( instance.bounds.size.y );
            top = e.layoutVertical( top );
          } );
        }
        else {
          instance.composite[component].bounds.setHeight( instance.bounds.size.y );
          top = instance.composite[component].layoutVertical( top );
        }
      }
      return View.prototype.layoutVertical.call( this, top );
    };

    this.layoutHorizontal = function( left ) {
      for (component in instance.composite) {
        if (instance.composite[component] instanceof Array) {
          instance.composite[component].forEach( function( e ) { 
            e.layoutHorizontal( left );
          } );
        }
        else {
          instance.composite[component].bounds.setWidth( this.bounds.size.x );
          instance.composite[component].layoutHorizontal( left );
        }
      }
      return View.prototype.layoutHorizontal.call( this, left ); 
    };
  }

  ColumnView.prototype = new View();

  exports.View = View;
  exports.LayerView = LayerView;
  exports.RowView = RowView;
  exports.ColumnView = ColumnView;

})(Builder);