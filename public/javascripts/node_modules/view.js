if (typeof Builder === 'undefined') {
  Builder = require( 'builder' ).Builder;
}

(function(Builder) {
  
  function View( controller ) {

    var instance = this
      , elements; 

    Element.call( this, controller );

    this.buildComposite = function( factory ) {
      var builder = new Builder( factory );
      this.composite = builder.buildComposite( controller );
      elements = null;
    };

    this.forEach = function( f ) {
      this.elements.forEach( function( element, index ) {
        f( element, index );
      });
    };

   this.pinLeft = function( left ) {
      View.prototype.pinLeft.call( this, left );
      this.forEach( function( element) {
        element.pinLeft( left );
      } );
    };

    this.pinRight = function( right ) {
      View.prototype.pinRight.call( this, right );
      this.forEach( function( element ) { 
        element.pinRight( right );
      });
    };

    this.pinTop = function( top ) {
      View.prototype.pinTop.call( this, top );
      this.forEach( function( element ) { 
        element.pinTop( top );
      });
    };

    this.pinBottom = function( bottom ) {
      View.prototype.pinBottom.call( this, bottom );
      this.forEach( function( element ) { 
        element.pinBottom( bottom );
      });
    };

    this.fillLeft = function( right, width ) {
      var cellWidth = width / this.elements.length;

      View.prototype.fillLeft.call( this, right, width ); 
      this.forEach( function( element ) {
        element.pinRight( right );
        right -= cellWidth 
        element.pinLeft( right );
      });
    };

    this.fillRight = function( left, width ) {

      View.prototype.fillRight.call( instance, left, width ); 
      
      this.forEach( function( element, index ) {
        element.pinLeft( left );
        
        if (element.bounds.right > element.bounds.left) {
          left += element.bounds.width();
        }
        else {

          var currentWidth = left - instance.bounds.left
            , cellWidth = (width - currentWidth) / (instance.elements.length - index);
          
          left += cellWidth;

          console.log( cellWidth );
        }

        element.pinRight( left );
      });
    };

    this.fillDown = function( top, height ) {
      var cellHeight = height / this.elements.length;

      View.prototype.fillDown.call( this, top, height ); 
      this.forEach( function( element ) {
        element.pinTop( top );
        top += cellHeight; 
        element.pinBottom( top );
      });
    };

    this.fillUp = function( bottom, height ) {
      var cellHeight = height / this.elements.length;

      View.prototype.fillUp.call( this, bottom, height ); 
      this.forEach( function( element ) {
        element.pinBottom( bottom );
        bottom -= cellHeight;
        element.pinTop( bottom );
      });
    };

    this.floatLeft = function( right ) {
      View.prototype.floatLeft.call( this, right ); 
      this.forEach( function( element ) {
        right -= element.floatLeft( right ); 
      });
    };

    this.floatRight = function( left ) {
      View.prototype.floatRight.call( this, left );
      this.forEach( function( element ) {
        left += element.floatRight( left );
      });
    };

    this.floatDown = function( top ) {
      View.prototype.floatDown.call( this, top );
      this.forEach( function( element ) {
        top += element.floatDown( top );
      });
    };

    this.floatUp = function( bottom ) {
      this.forEach( function( element ) {
        bottom -= element.floatUp( bottom );
      });
    };

    this.__defineGetter__( 'elements', function() {
      if (elements) {
        return elements;
      }
      elements = [];
      for (var type in this.composite) {
        var component = this.composite[type];
        if (component instanceof Array) {
          component.forEach( function( element ) {
            elements.push( element );

         } );
        } 
        else {
          elements.push( component );
        }
      }
      return elements;
    } );
  }

  View.prototype = new Element();

  exports.View = View;

})(Builder);
